项目概述

一、	网上图书购物数据库设计
1.1	项目介绍
时代进步，网上购物方便，登录购物网站，用户邮件注册会员，进行网上购买书籍，系统读取数据库中的商品列表和商品书籍，并且显示。注册后的用户可以选择自己喜欢的书籍进行购买。用户可以进行搜索商品书籍，对指定商品查询详细信息。用户可以添加多个商品到自己购物车中，并且提交订单，一个订单可以有多本书籍，用户可以提交多个订单。用户可对订单查询，付款，取消，收货，删除操作。

1.2	数据需求分析
1)	可行性分析
网上图书相对于传统购书方式有动态展示信息，图书数量种类多，购书时间地点不地域限制，多途径综合搜索，个性服务和价格低廉等优势。

2)	网上书店功能划分：用户主要可以分成两类
(一)	第一类是客户通过邮件注册成为会员，可以在首页进行浏览最近上新的书籍，也可以通过搜索书籍名称进行检索并且浏览相关信息，客户在选择自己喜欢的一本或者多本书籍后，放进购物车，点击购买，一个用户可以进行一次或多次购买。客户可以查看当前订单和以往订单；
(二)	第二类用户是管理员，管理员通过管理订单的分配管理和发货，增加删除书籍的数量，种类和定义价格，发布需要上新的书籍。管理员能在发货后能够修改订单状态。

3)	性能需求
(一)	系统可以对图书的库存进行统计；
(二)	系统界面友好，操作方便，灵活；
(三)	具有高可靠性和冗错能力，不允许系统在工作时间停机，不允许系统丢失；
(四)	具有安全检查机制，非法用户不能使用系统，不能偷看系统信息，不能修改图书，同时提供备份服务；
(五)	保密机制，各级使用者只能看到允许查看的系统信息。

4)	系统分析
(一)	本系统的线上图书店，可以分成两个管理系统：客户管理系统和管理员管理系统。客户管理系统系统的实现功能在于管理用户的信息的安全性和保密性，禁止非法用户对系统造成损害（比如输入验证码）；
(二)	管理员管理系统功能是类似于图书馆的后台工作人员，是对图书进行及时的管理，完善图书信息和图书的宣传。

5)	运行需求
(一)	用户界面：人性化界面，全新感觉，简单操作一目了然，对用户友好和带来便利；
(二)	故障处理：正常使用时不应出现错，若运行遇到不可恢复的系统错误，也必须保障数据库完好无损和确保用户的信息和资金完整。

6)	其他需求
(一)	功能实现：用户可在本系统下实现各种用户要求功能；
(二)	安全性：对于系统的重要数据都有密码保护，具有一定的安全性；
(三)	容错性：用户输入数据都有提示功能，具有较好的容错性能；
(四)	封闭性：用户的封闭性较好，用户基本上在提示信息下输入数据。




7)		数字字典     数据库名：goods
序号	列名	数据类型	长度	主键	允许空值	说明
1	uid	char	32	是	否	用户id
2	loginname	varchar	50	否	否	登录名，唯一值，输入空值提示错误
3	Loginpass	varchar	50	否	否	登录密码，输入空值提示错误
4	email	varchar	50	否	否	用户邮箱，输入空值提示错误
5	status	tinyint	1	否	否	状态，输入空值提示错误
6	activationCode	char	60	否	否	激活码，输入空值提示错误
表名：user

表名：admin
序号	列名	数据类型	长度	主键	允许空值	说明
1	adminId	char	32	是	否	管理员id
2	adminname	varchar	50	否	否	管理员名字，输入空值提示错误
3	adminpwd	varchar	50	否	否	管理员密码，输入空值提示错误

表名：book
序号	列名	数据类型	长度	主键	允许空值	说明
1	bid	char	32	是	否	图书id
2	bname	varchar	200	否	否	图书名字，输入空值提示错误
3	author	varchar	50	否	否	作者，输入空值提示错误
4	price	decimal	（8，2）	否	否	价格，输入空值提示错误
5	currPrice`	decimal	（8，2）	否	否	当前价格，输入空值提示错误
6	discount	decimal	（3，1）	否	否	打折价，输入空值提示错误
7	press	varchar	100	否	否	出版社，输入空值提示错误
8	publishtime	char	10	否	否	发行时间，输入空值提示错误
9	edition	int	11	否	否	版本，输入空值提示错误
10	pageNum	int	11	否	否	页数，输入空值提示错误
11	wordNum	int	11	否	否	字数，输入空值提示错误
12	printtime	char	10	否	否	印刷时间，输入空值提示错误
13	booksize	int	11	否	否	书本尺寸，输入空值提示错误
14	paper	varchar	50	否	否	页数，输入空值提示错误
15	cid	char	32	否	否	分类编号，，输入空值提示错误
16	image_w	varchar	100	否	否	图书缩略图，输入空值提示错误
17	image_b	varchar	100	否	否	图书图片，输入空值提示错误
18	orderBy	int	11	否	否	顺序列
19	Total	Int	255	否	否	图书库存，默认值为100

表名：cartitem
序号	列名	数据类型	长度	主键	允许空值	说明
1	cartitemId	char	32	是	否	购物条目id
2	quantity	int	11	否	否	数量，输入空值提示错误
3	bid	char	32	否	否	图书id，输入空值提示错误
4	uid	char	32	否	否	用户id，输入空值提示错误
5	orderBy	int	11	否	否	顺序列

表名：category
序号	列名	数据类型	长度	主键	允许空值	说明
1	cid	char	32	是	否	分类id
2	cname	varchar	50	否	否	分类名，输入空值提示错误
3	pid	char	32	否	否	父分类，输入空值提示错误
4	desc	varchar	100	否	否	分类描述，输入空值提示错误
5	orderBy	int	11	否	否	顺序列

表名：order
序号	列名	数据类型	长度	主键	允许空值	说明
1	oid	char	32	是	否	订单id
2	ordertime	char	19	否	否	下单时间，输入空值提示错误
3	total	decimal	(10,2)	否	否	总数，输入空值提示错误
4	status	int	11	否	否	状态，输入空值提示错误
5	address	varchar	1000	否	否	地址，输入空值提示错误
6	uid	char	32	否	否	用户id，输入空值提示错误

表名：orderitem
序号	列名	数据类型	长度	主键	允许空值	说明
1	orderItemId	char	32	是	否	下单项目id
2	quantity	int	11	否	否	数量，输入空值提示错误
3	subtotal	decimal	8,2	否	否	项目总额，输入空值提示错误
4	bid	char	32	否	否	图书id，输入空值提示错误
5	bname	varchar	200	否	否	图书名字，输入空值提示错误
6	currPrice	decimal	(8,2)	否	否	当前价格，输入空值提示错误
7	image_b	varchar	100	否	否	图书图片，输入空值提示错误
8	oid	char	32	否	否	订单id，输入空值提示错误

8)	流程图
 


1.3	概念结构设计
1)	全局E-R图：
 

2)	局部E-R图：
 


1.4	逻辑结构设计：实体关系模型：
1)	t_user(用户ID，用户名，密码，邮箱，激活状态，激活码)。
2)	t_order(订单号，订单时间，订单总额，订单状态，订单地址，用户ID，管理员ID)。
3)	t_cartitem(购物车图书ID，图书数目，图书ID，用户ID，购物车图书序号)。
4)	t_orderitem(订单项目号，图书数量，订单项目总额，图书ID，图书名，图书折扣价，图书图片，订单号)。
5)	t_book(图书ID，图书名字，图书作者，图书原价格，图书折扣价，折扣，出版社，出版时间，出版次数，总字数，图书分类ID，图书图片，图书序号，图书分类ID，仓库图书ID，管理员ID)。
6)	t_category(图书分类ID，图书分类名，图书分类父分类，图书分类描述，图书分类序号，管理员ID)。
7)	t_admin(管理员ID,管理员账号，管理员密码)。

1.5	数据库物理设计
1)	确定数据库存放位置
为了提高系统性能，根据应用情况将数据易变部分、稳定部分、存取频率较高部分和存取频率较低部分分开存放。
即把t_user(用户)表、t_categary(分类)表作为数据稳定和存取率较低那部分；而t_order（订单）表、t_orderitem（订单明细）表、t_book（展出图书）表、表作为数据易变和存取频率较高部分；t_admin（管理员）表则单独存放。
2)	系统配置设计
MySQL系统使用的默认配置变量值和存储分配参数符合本系统的要求，可不做修改。
3)	确定数据库存取方式
(一)	由于t_book表的cid（图书分类ID）经常出现在查询和连接操作中，故在cid上建立B+树索引。因为图书数量多，在图书的排序上加索引；
(二)	由于t_cartitem表的bid（图书ID）、uid（用户ID）经常出现在查询和连接操作中，故在bid和uid上建立B+树索引；
(三)	在t_category表中，由于图书种类多，在种类的排序上加索引。由于cname（种类名）和pid（父分类ID）经常在查询和连接中出现，故在这些属性上建立B+树索引；
(四)	在t_user表中，由于loginname经常在查询操作中出现，故在loginname上建立B+树索引；
(五)	由于order表和orderitem表的oid（订单号）经常要进行连接操作，为了提高订单号的查询速度，故对oid建立B+树索引；
(六)	由于order表和cartitem表的购物车ID经常要进行查询操作，为了提高订单号的查询速度，故对购物车ID建立B+树索引。
4)	评价物理结构
对时间效率、空间效率、维护代价和用户需求等方面进行权衡后，该方案可行。


二、	学生信息管理系统数据库实施步骤
3.1	数据库的创建
创建数据库表goods。字符集：utf8 -- UTF-8 Unicode。
排序规则：utf8_general_ci。
命令：create database goods default character set utf8 collate utf8_general_ci;

3.2	表对象的创建
1)	创建用户表t_user，包括以下属性，及各属性的数据类型，长度：
CREATE TABLE `t_user` (
`uid` char(32) NOT NULL,
`loginname` varchar(50) DEFAULT NULL,
`loginpass` varchar(50) DEFAULT NULL,
`email` varchar(50) DEFAULT NULL,
`status` tinyint(1) DEFAULT NULL,
`activationCode` char(64) DEFAULT NULL,
PRIMARY KEY (`uid`),
UNIQUE KEY `loginname` (`loginname`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
2)	创建用户表t_admin，包括以下属性，及各属性的数据类型，长度：
DROP TABLE IF EXISTS `t_admin`;
CREATE TABLE `t_admin` (
`adminId` char(32) NOT NULL,
`adminname` varchar(50) DEFAULT NULL,
`adminpwd` varchar(50) DEFAULT NULL,
PRIMARY KEY (`adminId`
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
3)	创建用户表t_book，包括以下属性，及各属性的数据类型，长度：
CREATE TABLE `t_book` (
  `bid` char(32) NOT NULL,
  `bname` varchar(200) DEFAULT NULL,
  `author` varchar(50) DEFAULT NULL,
  `price` decimal(8,2) DEFAULT NULL,
  `currPrice` decimal(8,1) DEFAULT NULL,
  `discount` decimal(3,1) DEFAULT NULL,
  `press` varchar(100) DEFAULT NULL,
  `publishtime` char(10) DEFAULT NULL,
  `edition` int(11) DEFAULT NULL,
  `pageNum` int(11) DEFAULT NULL,
  `wordNum` int(11) DEFAULT NULL,
  `printtime` char(10) DEFAULT NULL,
  `booksize` int(11) DEFAULT NULL,
  `paper` varchar(50) DEFAULT NULL,
  `cid` char(32) DEFAULT NULL,
  `image_w` varchar(100) DEFAULT NULL,
  `image_b` varchar(100) DEFAULT NULL,
  `total` int(100) DEFAULT '100',
  `orderBy` int(11) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`bid`),
  KEY `orderBy` (`orderBy`),
  KEY `FK_t_book_t_category` (`cid`),
  CONSTRAINT `t_book_t_category` FOREIGN KEY (`cid`) REFERENCES `t_category` (`cid`)
) ENGINE=InnoDB AUTO_INCREMENT=202 DEFAULT CHARSET=utf8;
4)	创建用户表t_cartitem，包括以下属性，及各属性的数据类型，长度：
CREATE TABLE `t_cartitem` (
`cartItemId` char(32) NOT NULL,
`quantity` int(11) DEFAULT NULL,
`bid` char(32) DEFAULT NULL,
`uid` char(32) DEFAULT NULL,
`orderBy` int(11) NOT NULL AUTO_INCREMENT,
PRIMARY KEY (`cartItemId`),
KEY `orderBy` (`orderBy`),
KEY `t_cartitem_t_user` (`uid`),
KEY `t_cartitem_t_book` (`bid`),
CONSTRAINT `t_cartitem_t_book` FOREIGN KEY (`bid`) REFERENCES `t_book` (`bid`),
CONSTRAINT `t_cartitem_t_user` FOREIGN KEY (`uid`) REFERENCES `t_user` (`uid`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;
5)	创建用户表t_category，包括以下属性，及各属性的数据类型，长度：
CREATE TABLE `t_category` (
`cid` char(32) NOT NULL,
`cname` varchar(50) DEFAULT NULL,
`pid` char(32) DEFAULT NULL,
`desc` varchar(100) DEFAULT NULL,
`orderBy` int(11) NOT NULL AUTO_INCREMENT,
PRIMARY KEY (`cid`),
UNIQUE KEY `cname` (`cname`),
KEY `t_category_t_category` (`pid`),
KEY `orderBy` (`orderBy`),
CONSTRAINT `t_category_t_category` FOREIGN KEY (`pid`) REFERENCES `t_category` (`cid`
) ENGINE=InnoDB AUTO_INCREMENT=48 DEFAULT CHARSET=utf8;
6)	创建用户表t_order，包括以下属性，及各属性的数据类型，长度：
CREATE TABLE `t_order` (
`oid` char(32) NOT NULL,
`ordertime` char(19) DEFAULT NULL,
`total` decimal(10,2) DEFAULT NULL,
`status` int(11) DEFAULT NULL,
`address` varchar(1000) DEFAULT NULL,
`uid` char(32) DEFAULT NULL,
PRIMARY KEY (`oid`),
KEY `t_order_t_user` (`uid`),
CONSTRAINT `t_order_t_user` FOREIGN KEY (`uid`) REFERENCES `t_user` (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
7)	创建用户表t_orderitem，包括以下属性，及各属性的数据类型，长度：
CREATE TABLE `t_orderitem` (
`orderItemId` char(32) NOT NULL,
`quantity` int(11) DEFAULT NULL,
`subtotal` decimal(8,2) DEFAULT NULL,
`bid` char(32) DEFAULT NULL,
`bname` varchar(200) DEFAULT NULL,
`currPrice` decimal(8,2) DEFAULT NULL,
`image_b` varchar(100) DEFAULT NULL,
`oid` char(32) DEFAULT NULL,
PRIMARY KEY (`orderItemId`),
KEY `t_orderitem_t_order` (`oid`),
CONSTRAINT `t_orderitem_t_order` FOREIGN KEY (`oid`) REFERENCES `t_order` (`oid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

3.3	索引对象的创建
1)	在t_book表中创建索引：
CREATE INDEX orderBy ON t_book(orderBy);
2)	在t_cartitem表中创建索引：
CREATE INDEX orderBy ON t_cartitem(orderBy);
3)	在t_category表中创建索引：
CREATE INDEX orderBy ON t_category(orderBy);
CREATE UNIQUE INDEX cname ON t_category(cname);
4)	在t_order表中创建索引：
CREATE INDEX t_order_t_user ON t_category(uid);
5)	在t_orderoitem表中创建索引：
CREATE INDEX t_orderitem_t_order ON t_category(oid);
6)	在t_user表中创建索引：
CREATE UNIQUE INDEX loginname ON t_category(loginname);

3.4	视图对象的创建
1)	创建各分类下的书本信息视图：
CREATE VIEW 书本分类 as SELECT c.cname,b.* FROM t_book b, t_category c WHERE b.cid=c.cid;
2)	创建每种分类下的书本数目视图：
CREATE VIEW 每种分类下的书本数目 as SELECT c.cname,COUNT(b.bid) as 总数 FROM t_book b, t_category c WHERE b.cid=c.cid GROUP BY c.cname;
3)	创建用户购物车下的书本信息和书本所属分类视图：
CREATE VIEW 用户购物车中的书本信息 as SELECT e.uid,e.loginname,c.cname,d.cartItemId,b.* FROM t_book b, t_category c,t_cartitem d,t_user e WHERE b.cid=c.cid AND d.bid=b.bid AND d.uid=e.uid;
4)	创建用户订单信息和订单下的每本书籍信息视图：
CREATE VIEW 用户订单信息和订单内书本信息 as SELECT d.loginname,b.orderItemId,a.address,a.status,b.quantity,e.* FROM t_order a, t_orderitem b, t_user d ,t_book e WHERE 
a.oid=b.oid AND e.bid=b.bid AND d.uid=a.uid;
5)	创建用户订单个数视图：
CREATE VIEW 用户订单个数 as SELECT a.uid as 用户号,a.loginname 用户名,COUNT(a.uid) as 订单数目 FROM t_user a,t_order b WHERE a.uid=b.uid GROUP BY a.uid;
6)	创建用户消费总额视图：
CREATE VIEW 用户消费总额 as SELECT a.uid as 用户号,a.loginname 用户名,SUM(b.total) as 消费总额 FROM t_user a,t_order b WHERE a.uid=b.uid GROUP BY a.uid;
7)	创建用户每单平均消费金额视图：
CREATE VIEW 用户每单平均消费金额 as SELECT a.uid as 用户号,a.loginname 用户名,AVG(b.total) as 平均消费总额 FROM t_user a,t_order b WHERE a.uid=b.uid GROUP BY a.uid;

3.5	存储过程的创建
1)	创建查找不超过输入价格的书本信息的存储：
create procedure maxprice(in maxprice int)
begin
select * from t_book where currPrice<maxprice;
End
2)	创建查询从现在到输入日期为止以前的所有订单数据：
create procedure PreviousData(in dd int)
begin
select * from t_order where ordertime between DATE_SUB(NOW(), INTERVAL dd DAY) and DATE_SUB(NOW(), INTERVAL 0 DAY) ORDER BY ordertime;
End
3)	创建查询所有订单中的最高价和最低价：
create procedure MaxMin()
begin
SELECT MAX(a.total),MIN(a.total) FROM t_order a; 
End
4)	创建更新所有书本的正确折扣价：
create procedure Price()
begin
update t_book set currPrice=price*discount*0.1;
End

3.6	触发器的创建 
1)	删除表t_order之前，删除与表t_orderitem所关联的数据。
create trigger order_orderitem before delete on t_order for each row
begin
delete from t_orderitem where oid=old.oid;
end
2)	删除表t_user之前，删除与t_user表相关联的所有数据。
create trigger deleteuser before delete on t_user for each row
begin
DELETE FROM t_cartitem WHERE uid=old.uid;
DELETE FROM t_order WHERE uid=old.uid;
End
3)	在表t_book中插入图书数据后，在t_book中减少相应的图书数量。
create trigger after_insert_order after insert on t_orderitem for each row
begin
update t_book set total = total - new.quantity where bid = new.bid;
end
4)	在表t_orderitem中插入图书数据后，在t_order中自动计算订单的总额，并更新t_order的total数据。
create trigger total_after after insert on t_orderitem for each row
begin
update t_order c,(SELECT a.oid,SUM(b.subtotal) total FROM t_order a,t_orderitem b WHERE a.oid=b.oid  GROUP BY a.oid) d set c.total=d.total WHERE c.oid=d.oid;
End
5)	在删除t_categroy表中删除分类时，删除其子分类下的图书。
create trigger category_delete before insert on t_category for each row
begin
delete from t_book where cid=old.cid;
End

3.7	数据库用户的创建 
1)	Create user 'admin’@’%’ identified by '1234';
%权限，表示admin用户通过所有主机均可连接,密码1234。
2)	grant all privileges on 'goods'.* to 'admin'@'%' identified by '1234';
授予用户admin通过外网IP对数据库“goods”的全部权限。

